{
    "include": "#include <iostream>",
    "namespace": "using namespace std;",
    "main-function": "int main() {\n\t// Entry point of the C++ application\n\treturn 0;\n}",
    "function": "ReturnType functionName(Parameters) {\n\t// Function body\n}",
    "class": "class ClassName {\npublic:\n\t// Constructor\n\tClassName() {\n\t\t// Constructor body\n\t}\n\n\t// Member function\n\tReturnType methodName(Parameters) {\n\t\t// Function body\n\t}\n\nprivate:\n\t// Private data members\n\tDataType dataMember;\n};",
    "if-statement": "if (condition) {\n\t// Code to execute if the condition is true\n} else {\n\t// Code to execute if the condition is false\n}",
    "for-loop": "for (int i = 0; i < length; i++) {\n\t// Loop body\n}",
    "while-loop": "while (condition) {\n\t// Loop body\n}",
    "array": "DataType arrayName[length];",
    "vector": "vector<DataType> vectorName;",
    "map": "map<KeyType, ValueType> mapName;",
    "set": "set<DataType> setName;",
    "pair": "pair<FirstType, SecondType> pairName;",
    "input": "cin >> variableName;",
    "output": "cout << variableName;",
    "pointer": "DataType* pointerName = nullptr;",
    "reference": "DataType& referenceName = variableName;",
    "lambda": "auto lambdaName = [](Parameters) -> ReturnType {\n\t// Lambda function body\n};",
    "class-constructor": "ClassName::ClassName(Parameters) {\n\t// Constructor body\n}",
    "class-member-function": "ReturnType ClassName::methodName(Parameters) {\n\t// Function body\n}",
    "namespace-alias": "namespace NewNamespaceName = OldNamespaceName;",
    "template-class": "template <typename T>\nclass TemplateClassName {\npublic:\n\tT data;\n\n\tTemplateClassName(T value) : data(value) {}\n\n\tT getData() {\n\t\treturn data;\n\t}\n};",
    "try-catch": "try {\n\t// Code that may throw an exception\n} catch (ExceptionType& e) {\n\t// Code to handle the exception\n}",
    "smart-pointer": "unique_ptr<DataType> uniquePtrName(new DataType);",
    "thread": "thread threadName([]() {\n\t// Thread body\n}); threadName.join();",
    "std-move": "DataType newValue = std::move(oldValue);",
    "struct": "struct StructName {\n\t// Members\n};",
    "enum": "enum EnumName {\n\tEnumValue1,\n\tEnumValue2,\n\t// Add more values\n};",
    "forward-declaration": "class ClassName;\n\n// Function declaration\nReturnType functionName(Parameters);\n",
    "op-overloading": "ReturnType operator OpSymbol(const ClassName& other) {\n\t// Operator overloading code\n}",
    "user-defined-type": "typedef DataType UserDefinedType;"
}
